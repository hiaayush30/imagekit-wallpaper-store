{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\n// Global variable to store the connection\nlet cached = global.mongoose;\n\nif (!cached) {\n    cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connectDb() {\n    if (cached.conn) {\n        return; \n    }\n\n    if (!cached.promise) {\n        const options = {\n            bufferCommands: true,\n            maxPoolSIze: 10\n        }\n        cached.promise = mongoose.connect(process.env.MONGODB_URI as string, options)\n            .then((mongoose) => {\n                return mongoose.connection;\n            });\n    }\n\n    try {\n        cached.conn = await cached.promise;\n    } catch (e) {\n        cached.promise = null;\n        throw e;\n    }\n\n    return cached.conn;\n}\n\nexport default connectDb;"],"names":[],"mappings":";;;AAAA;;AAEA,0CAA0C;AAC1C,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACT,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC3D;AAEA,eAAe;IACX,IAAI,OAAO,IAAI,EAAE;QACb;IACJ;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,MAAM,UAAU;YACZ,gBAAgB;YAChB,aAAa;QACjB;QACA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY,SAChE,IAAI,CAAC,CAAC;YACH,OAAO,SAAS,UAAU;QAC9B;IACR;IAEA,IAAI;QACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACtC,EAAE,OAAO,GAAG;QACR,OAAO,OAAO,GAAG;QACjB,MAAM;IACV;IAEA,OAAO,OAAO,IAAI;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/models/order.model.ts"],"sourcesContent":["import mongoose, { Document, Model } from \"mongoose\";\nimport { ImageVariant } from \"./product.model\";\n\ninterface PopulatedUser {\n    _id: mongoose.Types.ObjectId;\n    email: string;\n}\n\ninterface PopulatedProduct {\n    _id: mongoose.Types.ObjectId;\n    name: string;\n    imageUrl: string;\n}\n\nexport interface IOrder extends Document {\n    userId: mongoose.Types.ObjectId | PopulatedUser;\n    productId: mongoose.Types.ObjectId | PopulatedProduct;\n    variant: ImageVariant;\n\n    razorpayOrderId: string;\n    razorpayPaymentId?: string;\n    amount: number;\n    status: \"pending\" | \"completed\" | \"failed\";\n    downloadUrl?: string;\n    previewUrl?: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\nconst orderSchema = new mongoose.Schema<IOrder>({\n    userId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"User\"\n    },\n    productId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: \"Product\"\n    },\n    variant: {\n        type: {\n            type: String,\n            required: true,\n            enum: [\"SQUARE\", \"WIDE\", \"POTRAIT\"]\n        },\n        price: {\n            type: Number,\n            required: true,\n            min: 0\n\n        },\n        lisence: {\n            type: String,\n            enum: [\"personal\", \"commercial\"]\n        }\n    },\n    razorpayOrderId: {\n        type: String,\n        required: true\n    },\n    razorpayPaymentId: {\n        type: String,\n        required: false\n    },\n    amount: {\n        type: Number,\n        required: true,\n        min: 0\n    },\n    status: {\n        type: String,\n        required: true,\n        enum: [\"pending\", \"completed\", \"failed\"],\n        default: \"pending\"\n    },\n    downloadUrl: {\n        type: String\n    },\n    previewUrl: String\n}, { timestamps: true })\n\nconst Order: Model<IOrder> = mongoose.models['Order'] ? mongoose.models['Order'] : mongoose.model<IOrder>('Order', orderSchema);\n\nexport default Order;"],"names":[],"mappings":";;;AAAA;;AA6BA,MAAM,cAAc,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAS;IAC5C,QAAQ;QACJ,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;IACT;IACA,WAAW;QACP,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;IACT;IACA,SAAS;QACL,MAAM;YACF,MAAM;YACN,UAAU;YACV,MAAM;gBAAC;gBAAU;gBAAQ;aAAU;QACvC;QACA,OAAO;YACH,MAAM;YACN,UAAU;YACV,KAAK;QAET;QACA,SAAS;YACL,MAAM;YACN,MAAM;gBAAC;gBAAY;aAAa;QACpC;IACJ;IACA,iBAAiB;QACb,MAAM;QACN,UAAU;IACd;IACA,mBAAmB;QACf,MAAM;QACN,UAAU;IACd;IACA,QAAQ;QACJ,MAAM;QACN,UAAU;QACV,KAAK;IACT;IACA,QAAQ;QACJ,MAAM;QACN,UAAU;QACV,MAAM;YAAC;YAAW;YAAa;SAAS;QACxC,SAAS;IACb;IACA,aAAa;QACT,MAAM;IACV;IACA,YAAY;AAChB,GAAG;IAAE,YAAY;AAAK;AAEtB,MAAM,QAAuB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,GAAG,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,GAAG,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAS,SAAS;uCAEpG","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/app/api/webhook/razorpay/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport crypto from \"crypto\";\nimport connectDb from \"@/lib/db\"; // Adjust path as needed\nimport Order from \"@/models/order.model\"; // Adjust path as needed\nimport nodemailer from \"nodemailer\";\n\nexport const POST = async (req: NextRequest) => {\n    try {\n        const body = await req.text();\n        const signature = req.headers.get(\"x-razorpay-signature\");\n\n        const secret = process.env.razorpay_secret;\n        if (!secret) {\n            console.error(\"Razorpay secret is not defined in environment variables.\");\n            return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\n        }\n\n        const expectedSignature = crypto\n            .createHmac(\"sha256\", secret)\n            .update(body)\n            .digest('hex');\n\n        if (signature !== expectedSignature) {\n            console.warn(\"Webhook signature verification failed.\"); // Log the failure\n            return NextResponse.json({ error: \"Invalid signature\" }, { status: 400 });\n        }\n\n        // Signature is valid, proceed to process the event\n        const event = JSON.parse(body);\n\n        await connectDb(); // Ensure database connection\n\n        // Handle different webhook events\n        switch (event.event) {\n            case \"payment.captured\":\n                await handlePaymentCaptured(event);\n                break;\n            case \"payment.failed\":\n                await handlePaymentFailed(event);\n                break;\n            // Add handlers for other events you're interested in (e.g., order.paid, refund.created)\n            default:\n                console.log(\"Unhandled webhook event:\", event.event);\n        }\n\n        return NextResponse.json({ message: \"Webhook received and processed\" }, { status: 200 });\n\n    } catch (error) {\n        console.error(\"Error processing webhook:\", error);\n        return NextResponse.json({ error: \"Something went wrong\" }, { status: 500 });\n    }\n};\n\n// Function to handle payment.captured event\nasync function handlePaymentCaptured(event: any) {\n    try {\n        const payment = event.payload.payment.entity;\n        const order = await Order.findOneAndUpdate(\n            { razorpayOrderId: payment.order_id },\n            { razorpayPaymentId: payment.id, status: \"completed\" }\n        ).populate([\n            { path: \"productId\", select: \"name\" },\n            { path: \"userId\", select: \"email\" },\n        ]);\n\n        if (order) {\n            const transporter = nodemailer.createTransport({\n                service: \"sandbox.smtp.mailtrap.io\",\n                port: 2525,\n                auth: {\n                    user: process.env.mailtrap_username,\n                    pass: process.env.mailtrap_password,\n                },\n            });\n\n            await transporter.sendMail({\n                from: \"hiaayush30@gmail.com\",\n                to: (order.userId as { email: string }).email,\n                subject: \"Order completed\",\n                text: `Your order ${(order.productId as { name: string }).name} has been successfully placed`,\n            });\n            console.log(\"Payment captured and order updated:\", order);\n\n        } else {\n            console.warn(\"Order not found for Razorpay order ID:\", payment.order_id);\n        }\n    } catch (error) {\n        console.error(\"Error handling payment.captured event:\", error);\n        // Consider whether to throw the error to the main handler, or handle it here.\n        // If you throw here, the main handler will return a 500.  If you handle here,\n        // the webhook will still return 200 to Razorpay (indicating receipt), but\n        // you've logged the error.  Choose the behavior that best fits your needs.\n        // throw error; // Option 1: Throw to main handler\n    }\n}\n\n// Function to handle payment.failed event\nasync function handlePaymentFailed(event: any) {\n    try {\n        const payment = event.payload.payment.entity;\n        // Update order status to failed.  You might have different logic here\n        // (e.g., create a new order, send a failure notification).\n        const order = await Order.findOneAndUpdate(\n            { razorpayOrderId: payment.order_id },\n            { status: \"failed\" }\n        );\n\n        if (order) {\n            console.log(\"Payment failed for order:\", order);\n        } else {\n            console.warn(\"Order not found for failed payment:\", payment.order_id);\n        }\n\n    } catch (error) {\n        console.error(\"Error handling payment.failed event:\", error);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}