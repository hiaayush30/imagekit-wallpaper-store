{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/components/uploadFile.tsx"],"sourcesContent":["\"use client\" // This component must be a client component\n\nimport {\n    ImageKitAbortError,\n    ImageKitInvalidRequestError,\n    ImageKitServerError,\n    ImageKitUploadNetworkError,\n    upload,\n} from \"@imagekit/next\";\nimport { useRef, useState } from \"react\";\n\n// UploadExample component demonstrates file uploading using ImageKit's Next.js SDK.\nconst UploadFile = () => {\n    // State to keep track of the current upload progress (percentage)\n    const [progress, setProgress] = useState(0);\n\n    // Create a ref for the file input element to access its files easily\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    // Create an AbortController instance to provide an option to cancel the upload if needed.\n    const abortController = new AbortController();\n\n    /**\n     * Authenticates and retrieves the necessary upload credentials from the server.\n     *\n     * This function calls the authentication API endpoint to receive upload parameters like signature,\n     * expire time, token, and publicKey.\n     *\n     * @returns {Promise<{signature: string, expire: string, token: string, publicKey: string}>} The authentication parameters.\n     * @throws {Error} Throws an error if the authentication request fails.\n     */\n    const authenticator = async () => {\n        try {\n            // Perform the request to the upload authentication endpoint.\n            const response = await fetch(\"/api/upload-auth\");\n            if (!response.ok) {\n                // If the server response is not successful, extract the error text for debugging.\n                const errorText = await response.text();\n                throw new Error(`Request failed with status ${response.status}: ${errorText}`);\n            }\n\n            // Parse and destructure the response JSON for upload credentials.\n            const data = await response.json();\n            const { signature, expire, token, publicKey } = data;\n            return { signature, expire, token, publicKey };\n        } catch (error) {\n            // Log the original error for debugging before rethrowing a new error.\n            console.error(\"Authentication error:\", error);\n            throw new Error(\"Authentication request failed\");\n        }\n    };\n\n    /**\n     * Handles the file upload process.\n     *\n     * This function:\n     * - Validates file selection.\n     * - Retrieves upload authentication credentials.\n     * - Initiates the file upload via the ImageKit SDK.\n     * - Updates the upload progress.\n     * - Catches and processes errors accordingly.\n     */\n    const handleUpload = async () => {\n        // Access the file input element using the ref\n        const fileInput = fileInputRef.current;\n        if (!fileInput || !fileInput.files || fileInput.files.length === 0) {\n            alert(\"Please select a file to upload\");\n            return;\n        }\n\n        // Extract the first file from the file input\n        const file = fileInput.files[0];\n\n        // Retrieve authentication parameters for the upload.\n        let authParams;\n        try {\n            authParams = await authenticator();\n        } catch (authError) {\n            console.error(\"Failed to authenticate for upload:\", authError);\n            return;\n        }\n        const { signature, expire, token, publicKey } = authParams;\n\n        // Call the ImageKit SDK upload function with the required parameters and callbacks.\n        try {\n            const uploadResponse = await upload({\n                // Authentication parameters\n                expire,\n                token,\n                signature,\n                publicKey,\n                file,\n                fileName: file.name, // Optionally set a custom file name\n                // Progress callback to update upload progress state\n                onProgress: (event) => {\n                    setProgress((event.loaded / event.total) * 100);\n                },\n                // Abort signal to allow cancellation of the upload if needed.\n                abortSignal: abortController.signal,\n            });\n            console.log(\"Upload response:\", uploadResponse);\n        } catch (error) {\n            // Handle specific error types provided by the ImageKit SDK.\n            if (error instanceof ImageKitAbortError) {\n                console.error(\"Upload aborted:\", error.reason);\n            } else if (error instanceof ImageKitInvalidRequestError) {\n                console.error(\"Invalid request:\", error.message);\n            } else if (error instanceof ImageKitUploadNetworkError) {\n                console.error(\"Network error:\", error.message);\n            } else if (error instanceof ImageKitServerError) {\n                console.error(\"Server error:\", error.message);\n            } else {\n                // Handle any other errors that may occur.\n                console.error(\"Upload error:\", error);\n            }\n        }\n    };\n\n    return (\n        <>\n            {/* File input element using React ref */}\n            <input className=\"bg-red-500\"\n            type=\"file\" ref={fileInputRef} />\n            {/* Button to trigger the upload process */}\n            <Button type=\"button\" onClick={handleUpload}>\n                Upload file\n            </Button>\n            <br />\n            {/* Display the current upload progress */}\n            Upload progress: <progress value={progress} max={100}></progress>\n        </>\n    );\n};\n\nexport default UploadFile;"],"names":[],"mappings":"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","debugId":null}}]
}