{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\n// Global variable to store the connection\nlet cached = global.mongoose;\n\nif (!cached) {\n    cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connectDb() {\n    if (cached.conn) {\n        return; \n    }\n\n    if (!cached.promise) {\n        const options = {\n            bufferCommands: true,\n            maxPoolSIze: 10\n        }\n        cached.promise = mongoose.connect(process.env.MONGODB_URI as string, options)\n            .then((mongoose) => {\n                return mongoose.connection;\n            });\n    }\n\n    try {\n        cached.conn = await cached.promise;\n    } catch (e) {\n        cached.promise = null;\n        throw e;\n    }\n\n    return cached.conn;\n}\n\nexport default connectDb;"],"names":[],"mappings":";;;AAAA;;AAEA,0CAA0C;AAC1C,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACT,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC3D;AAEA,eAAe;IACX,IAAI,OAAO,IAAI,EAAE;QACb;IACJ;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,MAAM,UAAU;YACZ,gBAAgB;YAChB,aAAa;QACjB;QACA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY,SAChE,IAAI,CAAC,CAAC;YACH,OAAO,SAAS,UAAU;QAC9B;IACR;IAEA,IAAI;QACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACtC,EAAE,OAAO,GAAG;QACR,OAAO,OAAO,GAAG;QACjB,MAAM;IACV;IAEA,OAAO,OAAO,IAAI;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/models/user.model.ts"],"sourcesContent":["import mongoose, { Document, Model } from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IUser extends Document {\n    email: string;\n    password: string;\n    role: \"user\" | \"admin\"\n    createdAt: Date\n    updatedAt: Date\n}\n\n\nconst userSchema = new mongoose.Schema<IUser>({\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        enum: [\"user\", \"admin\"],\n        default: \"user\"\n    }\n}, { timestamps: true })\n\nuserSchema.pre('save', function (next) {\n    if (this.isModified('password')) {\n        const encrypted = bcrypt.hashSync(this.password, 5);\n        this.password = encrypted;\n    }\n    next();\n})\n\nconst User: Model<IUser> = mongoose.models['User'] ? mongoose.models['User'] : mongoose.model<IUser>('User', userSchema);\n\nexport default User;"],"names":[],"mappings":";;;AAAA;AACA;;;AAWA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAQ;IAC1C,OAAO;QACH,MAAM;QACN,UAAU;QACV,QAAQ;IACZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;IACd;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAQ;SAAQ;QACvB,SAAS;IACb;AACJ,GAAG;IAAE,YAAY;AAAK;AAEtB,WAAW,GAAG,CAAC,QAAQ,SAAU,IAAI;IACjC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa;QAC7B,MAAM,YAAY,mIAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE;QACjD,IAAI,CAAC,QAAQ,GAAG;IACpB;IACA;AACJ;AAEA,MAAM,OAAqB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAE9F","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/app/api/auth/register/route.ts"],"sourcesContent":["import connectDb from \"@/lib/db\";\nimport User from \"@/models/user.model\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\n//if you want various custom info from the user create a register endpoint or the login endpoint will do\n\nexport const POST = async (req: NextRequest) => {\n    try {\n        const { email, password } = await req.json();\n        if (!email || !password) {\n            return NextResponse.json({\n                error: \"invalid request,email and password required\"\n            }, { status: 403 })\n        }\n        await connectDb();\n        const existingUser = await User.findOne({\n            email\n        });\n        if (existingUser) {\n            return NextResponse.json({\n                error: \"User already exists\"\n            }, { status: 403 })\n        }\n        await User.create({\n            email,\n            password,\n            role: \"user\"\n        })\n        return NextResponse.json({\n            message: \"User registered successfully\"\n        }, { status: 201 })\n    } catch (error) {\n        console.log(error);\n        return NextResponse.json({\n            error: \"Something went wrong!\"\n        }, { status: 500 })\n    }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAIO,MAAM,OAAO,OAAO;IACvB,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,OAAO;YACX,GAAG;gBAAE,QAAQ;YAAI;QACrB;QACA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,eAAe,MAAM,gIAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YACpC;QACJ;QACA,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,OAAO;YACX,GAAG;gBAAE,QAAQ;YAAI;QACrB;QACA,MAAM,gIAAA,CAAA,UAAI,CAAC,MAAM,CAAC;YACd;YACA;YACA,MAAM;QACV;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,SAAS;QACb,GAAG;YAAE,QAAQ;QAAI;IACrB,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,OAAO;QACX,GAAG;YAAE,QAAQ;QAAI;IACrB;AACJ","debugId":null}}]
}