{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\n// Global variable to store the connection\nlet cached = global.mongoose;\n\nif (!cached) {\n    cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function connectDb() {\n    if (cached.conn) {\n        return; \n    }\n\n    if (!cached.promise) {\n        const options = {\n            bufferCommands: true,\n            maxPoolSIze: 10\n        }\n        cached.promise = mongoose.connect(process.env.MONGODB_URI as string, options)\n            .then((mongoose) => {\n                return mongoose.connection;\n            });\n    }\n\n    try {\n        cached.conn = await cached.promise;\n    } catch (e) {\n        cached.promise = null;\n        throw e;\n    }\n\n    return cached.conn;\n}\n\nexport default connectDb;"],"names":[],"mappings":";;;AAAA;;AAEA,0CAA0C;AAC1C,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACT,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC3D;AAEA,eAAe;IACX,IAAI,OAAO,IAAI,EAAE;QACb;IACJ;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,MAAM,UAAU;YACZ,gBAAgB;YAChB,aAAa;QACjB;QACA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAY,SAChE,IAAI,CAAC,CAAC;YACH,OAAO,SAAS,UAAU;QAC9B;IACR;IAEA,IAAI;QACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACtC,EAAE,OAAO,GAAG;QACR,OAAO,OAAO,GAAG;QACjB,MAAM;IACV;IAEA,OAAO,OAAO,IAAI;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/models/user.model.ts"],"sourcesContent":["import mongoose, { Document, Model } from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IUser extends Document {\n    email: string;\n    password: string;\n    role: \"user\" | \"admin\"\n    createdAt: Date\n    updatedAt: Date\n}\n\n\nconst userSchema = new mongoose.Schema<IUser>({\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true,\n    },\n    role: {\n        type: String,\n        enum: [\"user\", \"admin\"],\n        default: \"user\"\n    }\n}, { timestamps: true })\n\nuserSchema.pre('save', function (next) {\n    if (this.isModified('password')) {\n        const encrypted = bcrypt.hashSync(this.password, 5);\n        this.password = encrypted;\n    }\n    next();\n})\n\nconst User: Model<IUser> = mongoose.models['User'] ? mongoose.models['User'] : mongoose.model<IUser>('User', userSchema);\n\nexport default User;"],"names":[],"mappings":";;;AAAA;AACA;;;AAWA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAQ;IAC1C,OAAO;QACH,MAAM;QACN,UAAU;QACV,QAAQ;IACZ;IACA,UAAU;QACN,MAAM;QACN,UAAU;IACd;IACA,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAQ;SAAQ;QACvB,SAAS;IACb;AACJ,GAAG;IAAE,YAAY;AAAK;AAEtB,WAAW,GAAG,CAAC,QAAQ,SAAU,IAAI;IACjC,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa;QAC7B,MAAM,YAAY,mIAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE;QACjD,IAAI,CAAC,QAAQ,GAAG;IACpB;IACA;AACJ;AAEA,MAAM,OAAqB,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAE9F","debugId":null}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/lib/auth.ts"],"sourcesContent":["import CredentialsProvider from \"next-auth/providers/credentials\";\nimport connectDb from \"./db\";\nimport bcrypt from \"bcryptjs\";\nimport { NextAuthOptions } from \"next-auth\";\nimport User from \"@/models/user.model\";\n\nexport const authOptions: NextAuthOptions = {\n    providers: [\n        CredentialsProvider({\n            name: \"Credentials\",\n            credentials: {\n                email: { label: \"Email\", type: \"email\", placeholder: \"email\" },\n                password: { label: \"Password\", type: \"password\", placeholder: \"password\" }\n            },\n            async authorize(credentials) {\n                if (!credentials?.email || !credentials.password) {\n                    throw new Error('invalid credentials')\n                }\n                try {\n                    await connectDb();\n                    const user = await User.findOne({\n                        email: credentials.email\n                    })\n                    if (!user) {\n                        throw new Error('user not found')\n                    }\n                    const verifyPassword = await bcrypt.compare(credentials.password, user.password);\n                    if (!verifyPassword) {\n                        throw new Error('incorrect password');\n                    }\n                    return {\n                        id: user._id as string,\n                        email: user.email,\n                        role: user.role\n                    }\n                } catch (error) {\n                    console.error('Auth Error', error);\n                    throw error;\n                }\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\",\n        maxAge: 20 * 24 * 60 * 60 //30 days\n    },\n    callbacks: {\n        async jwt({ token, user, profile }) {\n            // The user object is only available when the user logs in. On subsequent requests, the token is used\n            // we are setting what all things will be stored in the token\n            if (user) {\n                token.id = user.id;\n                token.email = user.email;\n                token.role = user.role;\n            }\n            else if (profile) {\n                const foundUser = await User.findOne({\n                    where: {\n                        email: profile.email\n                    }\n                })\n                if (foundUser) {\n                    token.id = foundUser.id;\n                    token.email = foundUser.email;\n                    token.role = foundUser.role;\n                }\n            }\n            return token\n        },\n        async session({ session, token }) { //extract whatever you need from the token\n            session.user.id = token.id as string;\n            session.user.role = token.role as string;\n            session.user.email = token.email as string;\n            return session\n        }\n    },\n    pages: {\n        signIn:'/login',\n        error: '/login'\n    },\n    secret: process.env.NEXTAUTH_SECRET\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;;;;;AAEO,MAAM,cAA+B;IACxC,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,MAAM;YACN,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAQ;gBAC7D,UAAU;oBAAE,OAAO;oBAAY,MAAM;oBAAY,aAAa;gBAAW;YAC7E;YACA,MAAM,WAAU,WAAW;gBACvB,IAAI,CAAC,aAAa,SAAS,CAAC,YAAY,QAAQ,EAAE;oBAC9C,MAAM,IAAI,MAAM;gBACpB;gBACA,IAAI;oBACA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;oBACd,MAAM,OAAO,MAAM,gIAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAC5B,OAAO,YAAY,KAAK;oBAC5B;oBACA,IAAI,CAAC,MAAM;wBACP,MAAM,IAAI,MAAM;oBACpB;oBACA,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;oBAC/E,IAAI,CAAC,gBAAgB;wBACjB,MAAM,IAAI,MAAM;oBACpB;oBACA,OAAO;wBACH,IAAI,KAAK,GAAG;wBACZ,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACnB;gBACJ,EAAE,OAAO,OAAO;oBACZ,QAAQ,KAAK,CAAC,cAAc;oBAC5B,MAAM;gBACV;YACJ;QACJ;KACH;IACD,SAAS;QACL,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK,GAAG,SAAS;IACvC;IACA,WAAW;QACP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAC9B,qGAAqG;YACrG,6DAA6D;YAC7D,IAAI,MAAM;gBACN,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YAC1B,OACK,IAAI,SAAS;gBACd,MAAM,YAAY,MAAM,gIAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBACjC,OAAO;wBACH,OAAO,QAAQ,KAAK;oBACxB;gBACJ;gBACA,IAAI,WAAW;oBACX,MAAM,EAAE,GAAG,UAAU,EAAE;oBACvB,MAAM,KAAK,GAAG,UAAU,KAAK;oBAC7B,MAAM,IAAI,GAAG,UAAU,IAAI;gBAC/B;YACJ;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC5B,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC1B,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAC9B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAChC,OAAO;QACX;IACJ;IACA,OAAO;QACH,QAAO;QACP,OAAO;IACX;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACvC","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/models/product.model.ts"],"sourcesContent":["import mongoose, { Model } from \"mongoose\";\n\n// In MongoDB, and therefore in Mongoose, you have the flexibility to embed related data directly within a document instead of\n// always relying on separate collections and joins (like in traditional relational databases). Nested schemas allow you to define\n// the structure of these embedded documents.\n\n\n\nexport const IMAGE_VARIANTS = {\n    SQUARE: {\n        type: \"SQUARE\",\n        dimensions: { width: 1200, height: 1200 },\n        label: \"Square (1:1)\",\n        aspectRatio: \"1:1\"\n    },\n    WIDE: {\n        type: \"WIDE\",\n        dimensions: { width: 1920, height: 1080 },\n        label: \"Widescreen (16:9)\",\n        aspectRatio: \"16:9\"\n    },\n    POTRAIT: {\n        type: \"POTRAIT\",\n        dimensions: { width: 1080, height: 1440 },\n        label: \"Potrait (3:4)\",\n        aspectRatio: \"3:4\"\n    }\n}\n\nexport type imageVariantType = keyof typeof IMAGE_VARIANTS;\n// The keyof operator in TypeScript takes a type and produces a union type of its property names (keys).\n// imageVariantType is a type that can only be one of the string literals: \"SQUARE\" | \"WIDE\" | \"POTRAIT\".\n\nexport interface ImageVariant {\n    type: imageVariantType;\n    price: number;\n    lisence: \"personal\" | \"commercial\"\n}\n\nexport interface IProduct {\n    _id?: mongoose.Types.ObjectId;\n    name: string;\n    description: string;\n    imageUrl: string;\n    variants: ImageVariant[]\n}\n\nconst imageVariantSchema = new mongoose.Schema({\n    type: {\n        type: String,\n        enum: [\"SQUARE\", \"WIDE\", \"POTRAIT\"],\n        required: true\n    },\n    price: {\n        type: Number,\n        min: 0\n    },\n    lisence: {\n        type: String,\n        enum: [\"personal\", \"commercial\"]\n    }\n}, { timestamps: true })\n\nconst productSchema = new mongoose.Schema<IProduct>({\n    name: {\n        type: String,\n        required: true\n    },\n    description: {\n        type: String,\n        required: true\n    },\n    imageUrl: {\n        type: String,\n        required: true\n    },\n    variants: [imageVariantSchema]\n}, { timestamps: true })\n\nconst Product: Model<IProduct> = mongoose.models['Product'] ? mongoose.models['Product'] : mongoose.model<IProduct>('Product', productSchema);\n\nexport default Product;"],"names":[],"mappings":";;;;AAAA;;AAQO,MAAM,iBAAiB;IAC1B,QAAQ;QACJ,MAAM;QACN,YAAY;YAAE,OAAO;YAAM,QAAQ;QAAK;QACxC,OAAO;QACP,aAAa;IACjB;IACA,MAAM;QACF,MAAM;QACN,YAAY;YAAE,OAAO;YAAM,QAAQ;QAAK;QACxC,OAAO;QACP,aAAa;IACjB;IACA,SAAS;QACL,MAAM;QACN,YAAY;YAAE,OAAO;YAAM,QAAQ;QAAK;QACxC,OAAO;QACP,aAAa;IACjB;AACJ;AAoBA,MAAM,qBAAqB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC3C,MAAM;QACF,MAAM;QACN,MAAM;YAAC;YAAU;YAAQ;SAAU;QACnC,UAAU;IACd;IACA,OAAO;QACH,MAAM;QACN,KAAK;IACT;IACA,SAAS;QACL,MAAM;QACN,MAAM;YAAC;YAAY;SAAa;IACpC;AACJ,GAAG;IAAE,YAAY;AAAK;AAEtB,MAAM,gBAAgB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAW;IAChD,MAAM;QACF,MAAM;QACN,UAAU;IACd;IACA,aAAa;QACT,MAAM;QACN,UAAU;IACd;IACA,UAAU;QACN,MAAM;QACN,UAAU;IACd;IACA,UAAU;QAAC;KAAmB;AAClC,GAAG;IAAE,YAAY;AAAK;AAEtB,MAAM,UAA2B,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU,GAAG,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAW,WAAW;uCAEhH","debugId":null}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["file:///home/pandemicpanda30/Desktop/imagekit-wallpaper-store/src/app/api/products/route.ts"],"sourcesContent":["import { authOptions } from \"@/lib/auth\";\nimport connectDb from \"@/lib/db\";\nimport Product, { IProduct } from \"@/models/product.model\";\nimport { getServerSession } from \"next-auth\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET() {\n    try {\n        await connectDb();\n        const products = await Product.find({}).lean();\n\n        if (!products || products.length == 0) {\n            return NextResponse.json({\n                error: \"No products found\"\n            }, { status: 404 })\n        }\n        return NextResponse.json({\n            products\n        })\n    } catch (error) {\n        console.log(error);\n        return NextResponse.json({\n            error: \"Could not fetch products!\"\n        }, { status: 500 })\n    }\n}\n\nexport async function POST(req: NextRequest) {\n    try {\n        const session = await getServerSession(authOptions);\n        if (!session || session.user.role !== \"admin\") {\n            return NextResponse.json({\n                error: \"Unauthorized\"\n            }, { status: 401 })\n        }\n        await connectDb();\n        const body: IProduct = await req.json();\n        if (!body.name || !body.description || !body.imageUrl || body.variants.length == 0) {\n            return NextResponse.json({\n                error: \"all fields are required\"\n            }, { status: 400 })\n        }\n        const newProdcut = await Product.create(body);\n        return NextResponse.json({\n            newProdcut\n        }, { status: 201 })\n\n    } catch (error) {\n        console.log(error);\n        return NextResponse.json({\n            error: \"Could not add product!\"\n        }, { status: 500 })\n    }\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,WAAW,MAAM,mIAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI;QAE5C,IAAI,CAAC,YAAY,SAAS,MAAM,IAAI,GAAG;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,OAAO;YACX,GAAG;gBAAE,QAAQ;YAAI;QACrB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB;QACJ;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,OAAO;QACX,GAAG;YAAE,QAAQ;QAAI;IACrB;AACJ;AAEO,eAAe,KAAK,GAAgB;IACvC,IAAI;QACA,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAClD,IAAI,CAAC,WAAW,QAAQ,IAAI,CAAC,IAAI,KAAK,SAAS;YAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,OAAO;YACX,GAAG;gBAAE,QAAQ;YAAI;QACrB;QACA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;QACd,MAAM,OAAiB,MAAM,IAAI,IAAI;QACrC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,WAAW,IAAI,CAAC,KAAK,QAAQ,IAAI,KAAK,QAAQ,CAAC,MAAM,IAAI,GAAG;YAChF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACrB,OAAO;YACX,GAAG;gBAAE,QAAQ;YAAI;QACrB;QACA,MAAM,aAAa,MAAM,mIAAA,CAAA,UAAO,CAAC,MAAM,CAAC;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB;QACJ,GAAG;YAAE,QAAQ;QAAI;IAErB,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACrB,OAAO;QACX,GAAG;YAAE,QAAQ;QAAI;IACrB;AACJ","debugId":null}}]
}